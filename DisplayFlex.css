/* Padronização */

*{
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    text-align: center;
}

.info{
    width: 500px;
    margin: 0 auto;
    
}

.itemx{
    color: #fff;
    background-color: purple;
    height: 100px;
    width: 100px;
}

.altura{
    height: 200px;
}

.container{
    padding: 2px;
    width: 400px;
    margin: 0 auto;
    border: 1px #000 solid;
}

.item{
    margin: 3px;
    background: purple  ;
    color: #fff;
    flex: 1; 
}

/* DisplayBlock */
.Block{
    display: block;
}

/* DisplayFlex */

.Flex{
    display: flex;
}

/* Flex Direction  */
/* Formata a divisão dos itens dentro de um container seja em colunas(verticais) ou em fileira horizontal */

.row{
    flex-direction: row;
}

.row-reverse{
    flex-direction: row-reverse;
}

.column{
    flex-direction: column;
}

.column-reverse{
    flex-direction: column-reverse;
}

/* FlexWrap */
/* Interfere diretamente no para realocar um elemento em outra linha para que 
caiba no container */

.FlexWrap{
    flex-wrap: wrap;
}

.FlexWrapNowrap{
    flex-wrap: nowrap;
}

.FlexWrapReverse{
    flex-wrap: wrap-reverse;
}


/* Flex Flow */
/* Ele simplifica o codigo onde ele usa tanto os mecanismos do Wrap e do Direction */

.FlexFlowRowNowrap{
    flex-flow: row nowrap;
}

.FlexFlowRowWrap{
    flex-flow: row wrap;
}

.FlexFlowColumnWrap{
    flex-flow: column wrap;
}

.FlexFlowColumnNoWrap{
    flex-wrap: column nowrap;
}

/* Jusitfy content */
/* Uma maneira de alinhar os elementos internos a um container 
(menos quando ta totalizado) */

.JustifyContent .item{
    flex:none;
}

.jc-flexStart{
    justify-content: flex-start;
}
.jc-flexEnd{
    justify-content: flex-end;
}
.jc-center{
    justify-content: center;
}
.jc-SpaceBetween{
    justify-content: space-between;
}

.jc-SpaceArround{
    justify-content: space-around;
}


/* Align-itens */
/* Os itens são alinhados assim como o justify porem eles seguem 
um padrão selecionado para os itens do container*/

.AI-stretch{
    align-items: stretch;
}

.AI-center{
    align-items: center;
}

.AI-start{
    align-items: flex-start;
}

.AI-end{
    align-items: flex-end;
}

.AI-baseline{
    align-items: baseline;
}

/* Align-contents */

.AC-stretch{
    align-content: stretch;
}
.AC-center{
    align-content:center;
}

.AC-start{
    align-content: flex-start;
}

.AC-end{
    align-content: flex-end;
}

.AC-arround{
    align-content:space-around;
}

.AC-between{
    align-content:space-between;
}

/* Flex Grow */

.Grow0{
    flex-grow: 0;
}

.Grow1{
    flex-grow: 1;
}

.Grow2{
    flex-wrap: 2;
}

/* Flex Bases */

.FlexBasisAuto{
    flex-basis: auto;
}

.FlexBasis0{
    flex-basis: 0;
}

.FlexBasis100{
    flex-basis: 100px;
}
.FlexBasis300{
    flex-basis: 300px;
}

/* Flex Shrink */

.FlexShrink-0{
    flex-shrink: 0;
}

.FlexShrink-1{
    flex-shrink: 1;
}

.FlexShrink-2{
    flex-shrink: 2;
}

.FlexShrink-1{
    flex-shrink: 3;
}


/* Flex */

.flex{
    flex: 1;
}

.flex0{
    flex: 0;
}

.flexGrow{
    /* GROW - SHRINK - BASIS */
    flex: 20 0 0;
}

.flexShrink{
    /* GROW - SHRINK - BASIS */
    flex: 0 20 0;
}

.flexBasis{
    /* GROW - SHRINK - BASIS */
    flex: 0 0 20;
}

/* Order */

.Order{
    order: auto;
}

.Order2{
    order: 2;
}
.Order3{
    order: 3;
}
.Order4{
    order: 4;
}
.Order5{
    order: 5;
}


/* Align-self */

.AS-auto{
    align-self:auto;
}

.AS-stretch{
    align-self: stretch;
}

.AS-baseline{
    align-self:baseline;
}

.AS-start{
    align-self:flex-start;
}

.AS-end{
    align-self: flex-end;
}

.AS-center{
    align-self:center;
}
